@page "/agenda"
@using Booking.Blazor.Models
@using Booking.Blazor.Services
@inject AppointmentClient Api
@inject ClientsClient ClientsApi
@inject ServicesClient ServicesApi

<h3>Agenda (DÃ­a)</h3>

<input type="date" @bind-value="day" />
<button @onclick="Load">Cargar</button>

<h4>Nueva cita</h4>

<select @bind="selectedClientId">
    <option value="">-- Cliente --</option>
    @foreach (var c in clients)
    {
        <option value="@c.Id.ToString()">@c.Name</option>
    }
</select>

<select @bind="selectedServiceId">
    <option value="">-- Servicio --</option>
    @foreach (var s in services)
    {
        <option value="@s.Id.ToString()">@s.Name (@s.DurationMin min)</option>
    }
</select>

<input type="datetime-local" @bind-value="startLocal" />
<input placeholder="Notes" @bind="notes" />
<button @onclick="@(async () => await Create())">Crear</button>

<ul>
@foreach (var a in items)
{
    <li>
        @a.StartUtc.ToLocalTime(): @a.ClientId - @a.ServiceId - estado @a.Status
        <button @onclick="() => Attend(a.Id)">Atender</button>
        <button @onclick="() => Cancel(a.Id)">Cancelar</button>
        <button @onclick="() => Reschedule(a.Id)">+30min</button>
    </li>
}
</ul>

@code {
    // Listados
    List<AppointmentVm> items = new();
    List<ClientVm>  clients  = new();
    List<ServiceVm> services = new();

    // Bindings
    DateTime day = DateTime.Today;      // para el <input type="date">
    DateTime startLocal = DateTime.Now; // para el <input type="datetime-local">
    string? notes;
    string? selectedClientId;
    string? selectedServiceId;

    protected override async Task OnInitializedAsync()
    {
        clients  = await ClientsApi.GetAllAsync()  ?? new();
        services = await ServicesApi.GetAllAsync() ?? new();
        await Load();
    }

    async Task Load()
    {
        var dayUtc = DateTime.SpecifyKind(day.Date, DateTimeKind.Local).ToUniversalTime();
        items = await Api.GetByDayAsync(dayUtc) ?? new();
    }

    async Task Create()
    {
        if (!Guid.TryParse(selectedClientId, out var client)) return;
        if (!Guid.TryParse(selectedServiceId, out var service)) return;

        var startUtc = DateTime.SpecifyKind(startLocal, DateTimeKind.Local).ToUniversalTime();
        var created = await Api.CreateAsync(new CreateAppointmentVm(client, service, startUtc, notes));
        if (created is not null) items.Add(created);
    }

    async Task Attend(Guid id)    { await Api.AttendAsync(id);   await Load(); }
    async Task Cancel(Guid id)    { await Api.CancelAsync(id);   await Load(); }
    async Task Reschedule(Guid id)
    {
        var plus30Utc = DateTime.UtcNow.AddMinutes(30);
        await Api.RescheduleAsync(id, plus30Utc);
        await Load();
    }
}
