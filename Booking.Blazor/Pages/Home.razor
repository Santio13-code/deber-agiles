@page "/"
@using Booking.Blazor.Models
@using Booking.Blazor.Services
@inject AppointmentClient AppointmentsApi
@inject ClientsClient      ClientsApi
@inject ServicesClient     ServicesApi
@inject NavigationManager  Nav

<div class="container home-wrap">
  <!-- Encabezado -->
  <div class="card home-header">
    <div>
      <h1 class="home-title">Panel del Consultorio</h1>
      <p class="home-subtitle">Gestión interna de citas, pacientes y servicios</p>
    </div>
    <div class="home-actions">
      <button type="button" class="btn btn-primary" @onclick="@(() => Nav.NavigateTo("/agenda"))">Ir a Agenda</button>
      <button type="button" class="btn btn-outline" @onclick="@(() => Nav.NavigateTo("/clientes"))">Clientes</button>
      <button type="button" class="btn btn-outline" @onclick="@(() => Nav.NavigateTo("/servicios"))">Servicios</button>
      <button type="button" class="btn btn-outline" @onclick="@(() => Nav.NavigateTo("/historial"))">Historial Citas</button>
    </div>
  </div>

  <!-- KPIs -->
  <div class="kpi-grid">
    <div class="card kpi">
  <div class="kpi-label">Citas de hoy</div>
  <div class="kpi-value">📅 @todayCount</div>     <!-- 👈 -->
  <div class="kpi-foot">@pendingCount pendientes</div>
</div>
<div class="card kpi">
  <div class="kpi-label">Clientes</div>
  <div class="kpi-value">👤 @clientsCount</div>   <!-- 👈 -->
  <div class="kpi-foot">registrados</div>
</div>
<div class="card kpi">
  <div class="kpi-label">Servicios activos</div>
  <div class="kpi-value">🧪 @servicesCount</div>  <!-- 👈 -->
  <div class="kpi-foot">en catálogo</div>
</div>

  </div>

  <!-- Búsqueda rápida / atajos -->
  <div class="card quick">
    <div class="label">Acciones rápidas</div>
    <div class="quick-actions">
      <button type="button" class="btn btn-primary" @onclick="@(() => Nav.NavigateTo("/agenda"))">Nueva cita</button>
      <button type="button" class="btn btn-outline" @onclick="@(() => Nav.NavigateTo("/clientes"))">Nuevo cliente</button>
      <button type="button" class="btn btn-outline" @onclick="@(() => Nav.NavigateTo("/servicios"))">Nuevo servicio</button>
    </div>
  </div>

  <!-- Agenda de hoy -->
  <div class="card today">
    <div class="today-head">
      <div class="label">Agenda de hoy</div>
      <button type="button" class="btn btn-outline" @onclick="@(() => Nav.NavigateTo("/agenda"))">Ver completa</button>
    </div>
    <div class="label" style="margin-bottom:.4rem">
  @todayCount cita(s) • @pendingCount pendiente(s)
</div>


    @if (today.Count == 0)
    {
      <div class="empty">No hay citas para hoy.</div>
    }
    else
    {
      <div class="today-list">
        @foreach (var a in today.Take(5))
        {
          var statusClass = a.Status switch { 0 => "pending", 1 => "attended", 2 => "cancelled", _ => "pending" };
          <div class="today-item">
            <div>
              <div class="item-time">@a.StartUtc.ToLocalTime().ToString("HH:mm")</div>
              <div class="item-meta">@a.ClientName • @a.ServiceName</div>
            </div>
            <span class="badge @statusClass">
              @(a.Status switch { 0 => "Pendiente", 1 => "Atendida", 2 => "Cancelada", _ => "Pendiente" })
            </span>
          </div>
        }
      </div>
    }
  </div>

  <!-- Alertas (ej: citas en < 15 min) -->
  @if (alerts.Count > 0)
  {
    <div class="card alerts">
      <div class="label">Alertas</div>
      <ul>
        @foreach (var al in alerts)
        {
          <li>@al</li>
        }
      </ul>
    </div>
  }
</div>

@code {
  // KPIs
  int todayCount, pendingCount, clientsCount, servicesCount;

  // Agenda de hoy (enriquecida con nombres)
  List<AppointmentVm> today = new();
  List<ClientVm> clients = new();
  List<ServiceVm> services = new();

  // Alertas simples
  List<string> alerts = new();

  protected override async Task OnInitializedAsync()
  {
      // Cargar catálogos
      clients  = await ClientsApi.GetAllAsync()  ?? new();
      services = await ServicesApi.GetAllAsync() ?? new();

      // Cargar agenda de hoy
      var localToday = DateTime.Today;
      var dayUtc = DateTime.SpecifyKind(localToday, DateTimeKind.Local).ToUniversalTime();
      var list = await AppointmentsApi.GetByDayAsync(dayUtc) ?? new();

      // Enriquecer nombres
      foreach (var a in list)
      {
          a.ClientName  = clients.FirstOrDefault(c => c.Id == a.ClientId)?.Name ?? "—";
          a.ServiceName = services.FirstOrDefault(s => s.Id == a.ServiceId)?.Name ?? "—";
      }

      // KPIs
      today = list.OrderBy(a => a.StartUtc).ToList();
      todayCount    = today.Count;
      pendingCount  = today.Count(x => x.Status == 0);
      clientsCount  = clients.Count;
      servicesCount = services.Count;

      // Alertas (< 15 min, pendientes)
      var nowUtc = DateTime.UtcNow;
      foreach (var a in today.Where(x => x.Status == 0))
      {
          var mins = (a.StartUtc - nowUtc).TotalMinutes;
          if (mins >= 0 && mins <= 15)
              alerts.Add($"Cita de {a.ClientName} a las {a.StartUtc.ToLocalTime():HH:mm} en {Math.Round(mins)} min.");
      }
  }
}
